/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/actions/search": {
    /**
     * Search actions
     * @description Search actions
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of actions
     */
    post: operations["search_actions_search_post"];
  };
  "/actions": {
    /**
     * Create actions
     * @description Create action
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_actions_post"];
  };
  "/actions/{id_}": {
    /**
     * Get actions by ID
     * @description Read action by ID
     * :param id_: Action ID
     * :param db: Database session
     * :return: Action
     */
    get: operations["get_by_id_actions__id___get"];
    /**
     * Update actions
     * @description Update action
     * :param id_: Action ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated action
     */
    put: operations["update_actions__id___put"];
    /**
     * Delete actions
     * @description Delete action
     * :param id_: Action ID
     * :param db: Database session
     */
    delete: operations["delete_actions__id___delete"];
  };
  "/active_tow_airplanes/search": {
    /**
     * Search active_tow_airplanes
     * @description Search active_tow_airplanes
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of active_tow_airplanes
     */
    post: operations["search_active_tow_airplanes_search_post"];
  };
  "/active_tow_airplanes": {
    /**
     * Create active_tow_airplanes
     * @description Create active_tow_airplane
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_active_tow_airplanes_post"];
  };
  "/active_tow_airplanes/{id_}": {
    /**
     * Get active_tow_airplanes by ID
     * @description Read active_tow_airplane by ID
     * :param id_: ActiveTowAirplane ID
     * :param db: Database session
     * :return: ActiveTowAirplane
     */
    get: operations["get_by_id_active_tow_airplanes__id___get"];
    /**
     * Update active_tow_airplanes
     * @description Update active_tow_airplane
     * :param id_: ActiveTowAirplane ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated active_tow_airplane
     */
    put: operations["update_active_tow_airplanes__id___put"];
    /**
     * Delete active_tow_airplanes
     * @description Delete active_tow_airplane
     * :param id_: ActiveTowAirplane ID
     * :param db: Database session
     */
    delete: operations["delete_active_tow_airplanes__id___delete"];
  };
  "/emails/search": {
    /**
     * Search emails
     * @description Search emails
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of emails
     */
    post: operations["search_emails_search_post"];
  };
  "/emails": {
    /**
     * Create emails
     * @description Create email
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_emails_post"];
  };
  "/emails/{id_}": {
    /**
     * Get emails by ID
     * @description Read email by ID
     * :param id_: Email ID
     * :param db: Database session
     * :return: Email
     */
    get: operations["get_by_id_emails__id___get"];
    /**
     * Update emails
     * @description Update email
     * :param id_: Email ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated email
     */
    put: operations["update_emails__id___put"];
    /**
     * Delete emails
     * @description Delete email
     * :param id_: Email ID
     * :param db: Database session
     */
    delete: operations["delete_emails__id___delete"];
  };
  "/flights/search": {
    /**
     * Search flights
     * @description Search flights
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of flights
     */
    post: operations["search_flights_search_post"];
  };
  "/flights": {
    /**
     * Create flights
     * @description Create flight
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_flights_post"];
  };
  "/flights/{id_}": {
    /**
     * Get flights by ID
     * @description Read flight by ID
     * :param id_: Flight ID
     * :param db: Database session
     * :return: Flight
     */
    get: operations["get_by_id_flights__id___get"];
    /**
     * Update flights
     * @description Update flight
     * :param id_: Flight ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated flight
     */
    put: operations["update_flights__id___put"];
    /**
     * Delete flights
     * @description Delete flight
     * :param id_: Flight ID
     * :param db: Database session
     */
    delete: operations["delete_flights__id___delete"];
  };
  "/flight_types/search": {
    /**
     * Search flight_types
     * @description Search flight_types
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of flight_types
     */
    post: operations["search_flight_types_search_post"];
  };
  "/flight_types": {
    /**
     * Create flight_types
     * @description Create flight_type
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_flight_types_post"];
  };
  "/flight_types/{id_}": {
    /**
     * Get flight_types by ID
     * @description Read flight_type by ID
     * :param id_: FlightType ID
     * :param db: Database session
     * :return: FlightType
     */
    get: operations["get_by_id_flight_types__id___get"];
    /**
     * Update flight_types
     * @description Update flight_type
     * :param id_: FlightType ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated flight_type
     */
    put: operations["update_flight_types__id___put"];
    /**
     * Delete flight_types
     * @description Delete flight_type
     * :param id_: FlightType ID
     * :param db: Database session
     */
    delete: operations["delete_flight_types__id___delete"];
  };
  "/gliders/search": {
    /**
     * Search gliders
     * @description Search gliders
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of gliders
     */
    post: operations["search_gliders_search_post"];
  };
  "/gliders": {
    /**
     * Create gliders
     * @description Create glider
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_gliders_post"];
  };
  "/gliders/{id_}": {
    /**
     * Get gliders by ID
     * @description Read glider by ID
     * :param id_: Glider ID
     * :param db: Database session
     * :return: Glider
     */
    get: operations["get_by_id_gliders__id___get"];
    /**
     * Update gliders
     * @description Update glider
     * :param id_: Glider ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated glider
     */
    put: operations["update_gliders__id___put"];
    /**
     * Delete gliders
     * @description Delete glider
     * :param id_: Glider ID
     * :param db: Database session
     */
    delete: operations["delete_gliders__id___delete"];
  };
  "/members/search": {
    /**
     * Search members
     * @description Search members
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of members
     */
    post: operations["search_members_search_post"];
  };
  "/members": {
    /**
     * Create members
     * @description Create member
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_members_post"];
  };
  "/members/{id_}": {
    /**
     * Get members by ID
     * @description Read member by ID
     * :param id_: Member ID
     * :param db: Database session
     * :return: Member
     */
    get: operations["get_by_id_members__id___get"];
    /**
     * Update members
     * @description Update member
     * :param id_: Member ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated member
     */
    put: operations["update_members__id___put"];
    /**
     * Delete members
     * @description Delete member
     * :param id_: Member ID
     * :param db: Database session
     */
    delete: operations["delete_members__id___delete"];
  };
  "/member_roles/search": {
    /**
     * Search member_roles
     * @description Search member_roles
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of member_roles
     */
    post: operations["search_member_roles_search_post"];
  };
  "/member_roles": {
    /**
     * Create member_roles
     * @description Create member_role
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_member_roles_post"];
  };
  "/member_roles/{id_}": {
    /**
     * Get member_roles by ID
     * @description Read member_role by ID
     * :param id_: MemberRole ID
     * :param db: Database session
     * :return: MemberRole
     */
    get: operations["get_by_id_member_roles__id___get"];
    /**
     * Update member_roles
     * @description Update member_role
     * :param id_: MemberRole ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated member_role
     */
    put: operations["update_member_roles__id___put"];
    /**
     * Delete member_roles
     * @description Delete member_role
     * :param id_: MemberRole ID
     * :param db: Database session
     */
    delete: operations["delete_member_roles__id___delete"];
  };
  "/payment_methods/search": {
    /**
     * Search payment_methods
     * @description Search payment_methods
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of payment_methods
     */
    post: operations["search_payment_methods_search_post"];
  };
  "/payment_methods": {
    /**
     * Create payment_methods
     * @description Create payment_method
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_payment_methods_post"];
  };
  "/payment_methods/{id_}": {
    /**
     * Get payment_methods by ID
     * @description Read payment_method by ID
     * :param id_: PaymentMethod ID
     * :param db: Database session
     * :return: PaymentMethod
     */
    get: operations["get_by_id_payment_methods__id___get"];
    /**
     * Update payment_methods
     * @description Update payment_method
     * :param id_: PaymentMethod ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated payment_method
     */
    put: operations["update_payment_methods__id___put"];
    /**
     * Delete payment_methods
     * @description Delete payment_method
     * :param id_: PaymentMethod ID
     * :param db: Database session
     */
    delete: operations["delete_payment_methods__id___delete"];
  };
  "/payers_types/search": {
    /**
     * Search payers_types
     * @description Search payers_types
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of payers_types
     */
    post: operations["search_payers_types_search_post"];
  };
  "/payers_types": {
    /**
     * Create payers_types
     * @description Create payers_type
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_payers_types_post"];
  };
  "/payers_types/{id_}": {
    /**
     * Get payers_types by ID
     * @description Read payers_type by ID
     * :param id_: PayersType ID
     * :param db: Database session
     * :return: PayersType
     */
    get: operations["get_by_id_payers_types__id___get"];
    /**
     * Update payers_types
     * @description Update payers_type
     * :param id_: PayersType ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated payers_type
     */
    put: operations["update_payers_types__id___put"];
    /**
     * Delete payers_types
     * @description Delete payers_type
     * :param id_: PayersType ID
     * :param db: Database session
     */
    delete: operations["delete_payers_types__id___delete"];
  };
  "/roles/search": {
    /**
     * Search roles
     * @description Search roles
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of roles
     */
    post: operations["search_roles_search_post"];
  };
  "/roles": {
    /**
     * Create roles
     * @description Create role
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_roles_post"];
  };
  "/roles/{id_}": {
    /**
     * Get roles by ID
     * @description Read role by ID
     * :param id_: Role ID
     * :param db: Database session
     * :return: Role
     */
    get: operations["get_by_id_roles__id___get"];
    /**
     * Update roles
     * @description Update role
     * :param id_: Role ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated role
     */
    put: operations["update_roles__id___put"];
    /**
     * Delete roles
     * @description Delete role
     * :param id_: Role ID
     * :param db: Database session
     */
    delete: operations["delete_roles__id___delete"];
  };
  "/tow_airplanes/search": {
    /**
     * Search tow_airplanes
     * @description Search tow_airplanes
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of tow_airplanes
     */
    post: operations["search_tow_airplanes_search_post"];
  };
  "/tow_airplanes": {
    /**
     * Create tow_airplanes
     * @description Create tow_airplane
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_tow_airplanes_post"];
  };
  "/tow_airplanes/{id_}": {
    /**
     * Get tow_airplanes by ID
     * @description Read tow_airplane by ID
     * :param id_: TowAirplane ID
     * :param db: Database session
     * :return: TowAirplane
     */
    get: operations["get_by_id_tow_airplanes__id___get"];
    /**
     * Update tow_airplanes
     * @description Update tow_airplane
     * :param id_: TowAirplane ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated tow_airplane
     */
    put: operations["update_tow_airplanes__id___put"];
    /**
     * Delete tow_airplanes
     * @description Delete tow_airplane
     * :param id_: TowAirplane ID
     * :param db: Database session
     */
    delete: operations["delete_tow_airplanes__id___delete"];
  };
  "/tow_types/search": {
    /**
     * Search tow_types
     * @description Search tow_types
     * :param page: Page number
     * :param page_size: Page size
     * :param filters: Filters
     * :param db: Database session
     * :param settings: Settings
     * :return: List of tow_types
     */
    post: operations["search_tow_types_search_post"];
  };
  "/tow_types": {
    /**
     * Create tow_types
     * @description Create tow_type
     * :param data: Data
     * :param db: Database session
     */
    post: operations["create_tow_types_post"];
  };
  "/tow_types/{id_}": {
    /**
     * Get tow_types by ID
     * @description Read tow_type by ID
     * :param id_: TowType ID
     * :param db: Database session
     * :return: TowType
     */
    get: operations["get_by_id_tow_types__id___get"];
    /**
     * Update tow_types
     * @description Update tow_type
     * :param id_: TowType ID
     * :param data: Data to update
     * :param db: Database session
     * :return: Updated tow_type
     */
    put: operations["update_tow_types__id___put"];
    /**
     * Delete tow_types
     * @description Delete tow_type
     * :param id_: TowType ID
     * :param db: Database session
     */
    delete: operations["delete_tow_types__id___delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** ActionCreateSchema */
    ActionCreateSchema: {
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Closed At */
      closed_at: string | null;
      /** Field Responsible Id */
      field_responsible_id?: number | null;
      /** Responsible Cfi Id */
      responsible_cfi_id?: number | null;
      /** Instruction Glider Id */
      instruction_glider_id?: number | null;
    };
    /** ActionSchema */
    ActionSchema: {
      /** Id */
      id: number;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Closed At */
      closed_at: string | null;
      /** Field Responsible Id */
      field_responsible_id: number | null;
      /** Responsible Cfi Id */
      responsible_cfi_id: number | null;
      /** Instruction Glider Id */
      instruction_glider_id: number | null;
    };
    /** ActionSearchSchema */
    ActionSearchSchema: {
      /** Date */
      date?: string | null;
      /** Closed At */
      closed_at?: string | null;
      /** Field Responsible Id */
      field_responsible_id?: number | null;
      /** Responsible Cfi Id */
      responsible_cfi_id?: number | null;
      /** Instruction Glider Id */
      instruction_glider_id?: number | null;
    };
    /** ActionUpdateSchema */
    ActionUpdateSchema: {
      /** Date */
      date?: string | null;
      /** Closed At */
      closed_at?: string | null;
      /** Field Responsible Id */
      field_responsible_id?: number | null;
      /** Responsible Cfi Id */
      responsible_cfi_id?: number | null;
      /** Instruction Glider Id */
      instruction_glider_id?: number | null;
    };
    /** ActiveTowAirplaneCreateSchema */
    ActiveTowAirplaneCreateSchema: {
      /** Action Id */
      action_id: number;
      /** Tow Pilot Id */
      tow_pilot_id: number;
      /** Airplane Id */
      airplane_id: number;
    };
    /** ActiveTowAirplaneSchema */
    ActiveTowAirplaneSchema: {
      /** Id */
      id: number;
      /** Action Id */
      action_id: number;
      /** Tow Pilot Id */
      tow_pilot_id: number;
      /** Airplane Id */
      airplane_id: number;
    };
    /** ActiveTowAirplaneSearchSchema */
    ActiveTowAirplaneSearchSchema: {
      /** Action Id */
      action_id?: number | null;
      /** Tow Pilot Id */
      tow_pilot_id?: number | null;
      /** Airplane Id */
      airplane_id?: number | null;
    };
    /** ActiveTowAirplaneUpdateSchema */
    ActiveTowAirplaneUpdateSchema: {
      /** Action Id */
      action_id?: number | null;
      /** Tow Pilot Id */
      tow_pilot_id?: number | null;
      /** Airplane Id */
      airplane_id?: number | null;
    };
    /** EmailCreateSchema */
    EmailCreateSchema: {
      /**
       * Sent At
       * Format: date-time
       */
      sent_at: string;
      /** Recipient Member Id */
      recipient_member_id: number;
      /** Flight Id */
      flight_id?: number | null;
    };
    /** EmailSchema */
    EmailSchema: {
      /** Id */
      id: number;
      /**
       * Sent At
       * Format: date-time
       */
      sent_at: string;
      /** Recipient Member Id */
      recipient_member_id: number;
      /** Flight Id */
      flight_id: number | null;
    };
    /** EmailSearchSchema */
    EmailSearchSchema: {
      /** Sent At */
      sent_at: string | null;
      /** Recipient Member Id */
      recipient_member_id?: number | null;
      /** Flight Id */
      flight_id?: number | null;
    };
    /** EmailUpdateSchema */
    EmailUpdateSchema: {
      /** Sent At */
      sent_at: string | null;
      /** Recipient Member Id */
      recipient_member_id?: number | null;
      /** Flight Id */
      flight_id?: number | null;
    };
    /** FlightCreateSchema */
    FlightCreateSchema: {
      /** Action Id */
      action_id: number;
      /** Take Off At */
      take_off_at?: string | null;
      /** Landing At */
      landing_at?: string | null;
      /** Glider Id */
      glider_id?: number | null;
      /** Pilot 1 Id */
      pilot_1_id?: number | null;
      /** Pilot 2 Id */
      pilot_2_id?: number | null;
      /** Tow Airplane Id */
      tow_airplane_id?: number | null;
      /** Tow Pilot Id */
      tow_pilot_id?: number | null;
      /** Tow Type Id */
      tow_type_id?: number | null;
      /** Flight Type Id */
      flight_type_id?: number | null;
      /** Payers Type Id */
      payers_type_id?: number | null;
      /** Payment Method Id */
      payment_method_id?: number | null;
      /** Payment Receiver Id */
      payment_receiver_id?: number | null;
      /** Paying Member Id */
      paying_member_id?: number | null;
      /** Status */
      status: string;
    };
    /** FlightSchema */
    FlightSchema: {
      /** Id */
      id: number;
      /** Action Id */
      action_id: number;
      /** Take Off At */
      take_off_at: string | null;
      /** Landing At */
      landing_at: string | null;
      /** Glider Id */
      glider_id: number | null;
      /** Pilot 1 Id */
      pilot_1_id: number | null;
      /** Pilot 2 Id */
      pilot_2_id: number | null;
      /** Tow Airplane Id */
      tow_airplane_id: number | null;
      /** Tow Pilot Id */
      tow_pilot_id: number | null;
      /** Tow Type Id */
      tow_type_id: number | null;
      /** Flight Type Id */
      flight_type_id: number | null;
      /** Payers Type Id */
      payers_type_id: number | null;
      /** Payment Method Id */
      payment_method_id: number | null;
      /** Payment Receiver Id */
      payment_receiver_id: number | null;
      /** Paying Member Id */
      paying_member_id: number | null;
      /** Status */
      status: string;
    };
    /** FlightSearchSchema */
    FlightSearchSchema: {
      /** Action Id */
      action_id?: number | null;
      /** Take Off At */
      take_off_at?: string | null;
      /** Landing At */
      landing_at?: string | null;
      /** Glider Id */
      glider_id?: number | null;
      /** Pilot 1 Id */
      pilot_1_id?: number | null;
      /** Pilot 2 Id */
      pilot_2_id?: number | null;
      /** Tow Airplane Id */
      tow_airplane_id?: number | null;
      /** Tow Pilot Id */
      tow_pilot_id?: number | null;
      /** Tow Type Id */
      tow_type_id?: number | null;
      /** Flight Type Id */
      flight_type_id?: number | null;
      /** Payers Type Id */
      payers_type_id?: number | null;
      /** Payment Method Id */
      payment_method_id?: number | null;
      /** Payment Receiver Id */
      payment_receiver_id?: number | null;
      /** Paying Member Id */
      paying_member_id?: number | null;
      /** Status */
      status?: string | null;
    };
    /** FlightTypeCreateSchema */
    FlightTypeCreateSchema: {
      /** Name */
      name: string;
    };
    /** FlightTypeSchema */
    FlightTypeSchema: {
      /** Id */
      id: number;
      /** Name */
      name: string;
    };
    /** FlightTypeSearchSchema */
    FlightTypeSearchSchema: {
      /** Name */
      name?: string | null;
    };
    /** FlightTypeUpdateSchema */
    FlightTypeUpdateSchema: {
      /** Name */
      name?: string | null;
    };
    /** FlightUpdateSchema */
    FlightUpdateSchema: {
      /** Action Id */
      action_id?: number | null;
      /** Take Off At */
      take_off_at?: string | null;
      /** Landing At */
      landing_at?: string | null;
      /** Glider Id */
      glider_id?: number | null;
      /** Pilot 1 Id */
      pilot_1_id?: number | null;
      /** Pilot 2 Id */
      pilot_2_id?: number | null;
      /** Tow Airplane Id */
      tow_airplane_id?: number | null;
      /** Tow Pilot Id */
      tow_pilot_id?: number | null;
      /** Tow Type Id */
      tow_type_id?: number | null;
      /** Flight Type Id */
      flight_type_id?: number | null;
      /** Payers Type Id */
      payers_type_id?: number | null;
      /** Payment Method Id */
      payment_method_id?: number | null;
      /** Payment Receiver Id */
      payment_receiver_id?: number | null;
      /** Paying Member Id */
      paying_member_id?: number | null;
      /** Status */
      status?: string | null;
    };
    /** GliderCreateSchema */
    GliderCreateSchema: {
      /** Call Sign */
      call_sign: string;
      /** Num Seats */
      num_seats: number;
      /** Type */
      type: number;
    };
    /** GliderSchema */
    GliderSchema: {
      /** Id */
      id: number;
      /** Call Sign */
      call_sign: string;
      /** Num Seats */
      num_seats: number;
      /** Type */
      type: number;
    };
    /** GliderSearchSchema */
    GliderSearchSchema: {
      /** Call Sign */
      call_sign?: string | null;
      /** Num Seats */
      num_seats?: number | null;
      /** Type */
      type?: number | null;
    };
    /** GliderUpdateSchema */
    GliderUpdateSchema: {
      /** Call Sign */
      call_sign?: string | null;
      /** Num Seats */
      num_seats?: number | null;
      /** Type */
      type?: number | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MemberCreateSchema */
    MemberCreateSchema: {
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Email */
      email: string;
      /** Phone Number */
      phone_number?: string | null;
    };
    /** MemberRoleCreateSchema */
    MemberRoleCreateSchema: {
      /** Member Id */
      member_id: number;
      /** Role Id */
      role_id: number;
    };
    /** MemberRoleSchema */
    MemberRoleSchema: {
      /** Id */
      id: number;
      /** Member Id */
      member_id: number;
      /** Role Id */
      role_id: number;
    };
    /** MemberRoleSearchSchema */
    MemberRoleSearchSchema: {
      /** Member Id */
      member_id?: number | null;
      /** Role Id */
      role_id?: number | null;
    };
    /** MemberRoleUpdateSchema */
    MemberRoleUpdateSchema: {
      /** Member Id */
      member_id?: number | null;
      /** Role Id */
      role_id?: number | null;
    };
    /** MemberSchema */
    MemberSchema: {
      /** Id */
      id: number;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Email */
      email: string;
      /** Phone Number */
      phone_number: string | null;
    };
    /** MemberSearchSchema */
    MemberSearchSchema: {
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Email */
      email?: string | null;
      /** Phone Number */
      phone_number?: string | null;
    };
    /** MemberUpdateSchema */
    MemberUpdateSchema: {
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Email */
      email?: string | null;
      /** Phone Number */
      phone_number?: string | null;
    };
    /** PayersTypeCreateSchema */
    PayersTypeCreateSchema: {
      /** Name */
      name: string;
    };
    /** PayersTypeSchema */
    PayersTypeSchema: {
      /** Id */
      id: number;
      /** Name */
      name: string;
    };
    /** PayersTypeSearchSchema */
    PayersTypeSearchSchema: {
      /** Name */
      name?: string | null;
    };
    /** PayersTypeUpdateSchema */
    PayersTypeUpdateSchema: {
      /** Name */
      name?: string | null;
    };
    /** PaymentMethodCreateSchema */
    PaymentMethodCreateSchema: {
      /** Name */
      name: string;
    };
    /** PaymentMethodSchema */
    PaymentMethodSchema: {
      /** Id */
      id: number;
      /** Name */
      name: string;
    };
    /** PaymentMethodSearchSchema */
    PaymentMethodSearchSchema: {
      /** Name */
      name?: string | null;
    };
    /** PaymentMethodUpdateSchema */
    PaymentMethodUpdateSchema: {
      /** Name */
      name?: string | null;
    };
    /** RoleCreateSchema */
    RoleCreateSchema: {
      /** Name */
      name: string;
    };
    /** RoleSchema */
    RoleSchema: {
      /** Id */
      id: number;
      /** Name */
      name: string;
    };
    /** RoleSearchSchema */
    RoleSearchSchema: {
      /** Name */
      name?: string | null;
    };
    /** RoleUpdateSchema */
    RoleUpdateSchema: {
      /** Name */
      name?: string | null;
    };
    /** TowAirplaneCreateSchema */
    TowAirplaneCreateSchema: {
      /** Call Sign */
      call_sign: string;
      /** Type */
      type: number;
    };
    /** TowAirplaneSchema */
    TowAirplaneSchema: {
      /** Id */
      id: number;
      /** Call Sign */
      call_sign: string;
      /** Type */
      type: number;
    };
    /** TowAirplaneSearchSchema */
    TowAirplaneSearchSchema: {
      /** Call Sign */
      call_sign?: string | null;
      /** Type */
      type?: number | null;
    };
    /** TowAirplaneUpdateSchema */
    TowAirplaneUpdateSchema: {
      /** Call Sign */
      call_sign?: string | null;
      /** Type */
      type?: number | null;
    };
    /** TowTypeCreateSchema */
    TowTypeCreateSchema: {
      /** Name */
      name: string;
    };
    /** TowTypeSchema */
    TowTypeSchema: {
      /** Id */
      id: number;
      /** Name */
      name: string;
    };
    /** TowTypeSearchSchema */
    TowTypeSearchSchema: {
      /** Name */
      name?: string | null;
    };
    /** TowTypeUpdateSchema */
    TowTypeUpdateSchema: {
      /** Name */
      name?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Search actions
   * @description Search actions
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of actions
   */
  search_actions_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ActionSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActionSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create actions
   * @description Create action
   * :param data: Data
   * :param db: Database session
   */
  create_actions_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActionCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActionSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get actions by ID
   * @description Read action by ID
   * :param id_: Action ID
   * :param db: Database session
   * :return: Action
   */
  get_by_id_actions__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActionSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update actions
   * @description Update action
   * :param id_: Action ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated action
   */
  update_actions__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActionUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActionSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete actions
   * @description Delete action
   * :param id_: Action ID
   * :param db: Database session
   */
  delete_actions__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search active_tow_airplanes
   * @description Search active_tow_airplanes
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of active_tow_airplanes
   */
  search_active_tow_airplanes_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ActiveTowAirplaneSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveTowAirplaneSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create active_tow_airplanes
   * @description Create active_tow_airplane
   * :param data: Data
   * :param db: Database session
   */
  create_active_tow_airplanes_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActiveTowAirplaneCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveTowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get active_tow_airplanes by ID
   * @description Read active_tow_airplane by ID
   * :param id_: ActiveTowAirplane ID
   * :param db: Database session
   * :return: ActiveTowAirplane
   */
  get_by_id_active_tow_airplanes__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveTowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update active_tow_airplanes
   * @description Update active_tow_airplane
   * :param id_: ActiveTowAirplane ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated active_tow_airplane
   */
  update_active_tow_airplanes__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActiveTowAirplaneUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveTowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete active_tow_airplanes
   * @description Delete active_tow_airplane
   * :param id_: ActiveTowAirplane ID
   * :param db: Database session
   */
  delete_active_tow_airplanes__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search emails
   * @description Search emails
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of emails
   */
  search_emails_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmailSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmailSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create emails
   * @description Create email
   * :param data: Data
   * :param db: Database session
   */
  create_emails_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmailSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get emails by ID
   * @description Read email by ID
   * :param id_: Email ID
   * :param db: Database session
   * :return: Email
   */
  get_by_id_emails__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmailSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update emails
   * @description Update email
   * :param id_: Email ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated email
   */
  update_emails__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmailSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete emails
   * @description Delete email
   * :param id_: Email ID
   * :param db: Database session
   */
  delete_emails__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search flights
   * @description Search flights
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of flights
   */
  search_flights_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["FlightSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create flights
   * @description Create flight
   * :param data: Data
   * :param db: Database session
   */
  create_flights_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get flights by ID
   * @description Read flight by ID
   * :param id_: Flight ID
   * :param db: Database session
   * :return: Flight
   */
  get_by_id_flights__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update flights
   * @description Update flight
   * :param id_: Flight ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated flight
   */
  update_flights__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete flights
   * @description Delete flight
   * :param id_: Flight ID
   * :param db: Database session
   */
  delete_flights__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search flight_types
   * @description Search flight_types
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of flight_types
   */
  search_flight_types_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["FlightTypeSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightTypeSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create flight_types
   * @description Create flight_type
   * :param data: Data
   * :param db: Database session
   */
  create_flight_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightTypeCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get flight_types by ID
   * @description Read flight_type by ID
   * :param id_: FlightType ID
   * :param db: Database session
   * :return: FlightType
   */
  get_by_id_flight_types__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update flight_types
   * @description Update flight_type
   * :param id_: FlightType ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated flight_type
   */
  update_flight_types__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightTypeUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlightTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete flight_types
   * @description Delete flight_type
   * :param id_: FlightType ID
   * :param db: Database session
   */
  delete_flight_types__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search gliders
   * @description Search gliders
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of gliders
   */
  search_gliders_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GliderSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GliderSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create gliders
   * @description Create glider
   * :param data: Data
   * :param db: Database session
   */
  create_gliders_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GliderCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GliderSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get gliders by ID
   * @description Read glider by ID
   * :param id_: Glider ID
   * :param db: Database session
   * :return: Glider
   */
  get_by_id_gliders__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GliderSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update gliders
   * @description Update glider
   * :param id_: Glider ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated glider
   */
  update_gliders__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GliderUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GliderSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete gliders
   * @description Delete glider
   * :param id_: Glider ID
   * :param db: Database session
   */
  delete_gliders__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search members
   * @description Search members
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of members
   */
  search_members_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MemberSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create members
   * @description Create member
   * :param data: Data
   * :param db: Database session
   */
  create_members_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get members by ID
   * @description Read member by ID
   * :param id_: Member ID
   * :param db: Database session
   * :return: Member
   */
  get_by_id_members__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update members
   * @description Update member
   * :param id_: Member ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated member
   */
  update_members__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete members
   * @description Delete member
   * :param id_: Member ID
   * :param db: Database session
   */
  delete_members__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search member_roles
   * @description Search member_roles
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of member_roles
   */
  search_member_roles_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MemberRoleSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberRoleSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create member_roles
   * @description Create member_role
   * :param data: Data
   * :param db: Database session
   */
  create_member_roles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberRoleCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberRoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get member_roles by ID
   * @description Read member_role by ID
   * :param id_: MemberRole ID
   * :param db: Database session
   * :return: MemberRole
   */
  get_by_id_member_roles__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberRoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update member_roles
   * @description Update member_role
   * :param id_: MemberRole ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated member_role
   */
  update_member_roles__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberRoleUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MemberRoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete member_roles
   * @description Delete member_role
   * :param id_: MemberRole ID
   * :param db: Database session
   */
  delete_member_roles__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search payment_methods
   * @description Search payment_methods
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of payment_methods
   */
  search_payment_methods_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PaymentMethodSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethodSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create payment_methods
   * @description Create payment_method
   * :param data: Data
   * :param db: Database session
   */
  create_payment_methods_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentMethodCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethodSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get payment_methods by ID
   * @description Read payment_method by ID
   * :param id_: PaymentMethod ID
   * :param db: Database session
   * :return: PaymentMethod
   */
  get_by_id_payment_methods__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethodSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update payment_methods
   * @description Update payment_method
   * :param id_: PaymentMethod ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated payment_method
   */
  update_payment_methods__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentMethodUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethodSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete payment_methods
   * @description Delete payment_method
   * :param id_: PaymentMethod ID
   * :param db: Database session
   */
  delete_payment_methods__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search payers_types
   * @description Search payers_types
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of payers_types
   */
  search_payers_types_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PayersTypeSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayersTypeSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create payers_types
   * @description Create payers_type
   * :param data: Data
   * :param db: Database session
   */
  create_payers_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayersTypeCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayersTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get payers_types by ID
   * @description Read payers_type by ID
   * :param id_: PayersType ID
   * :param db: Database session
   * :return: PayersType
   */
  get_by_id_payers_types__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayersTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update payers_types
   * @description Update payers_type
   * :param id_: PayersType ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated payers_type
   */
  update_payers_types__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PayersTypeUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PayersTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete payers_types
   * @description Delete payers_type
   * :param id_: PayersType ID
   * :param db: Database session
   */
  delete_payers_types__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search roles
   * @description Search roles
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of roles
   */
  search_roles_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RoleSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create roles
   * @description Create role
   * :param data: Data
   * :param db: Database session
   */
  create_roles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get roles by ID
   * @description Read role by ID
   * :param id_: Role ID
   * :param db: Database session
   * :return: Role
   */
  get_by_id_roles__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update roles
   * @description Update role
   * :param id_: Role ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated role
   */
  update_roles__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RoleSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete roles
   * @description Delete role
   * :param id_: Role ID
   * :param db: Database session
   */
  delete_roles__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search tow_airplanes
   * @description Search tow_airplanes
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of tow_airplanes
   */
  search_tow_airplanes_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TowAirplaneSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowAirplaneSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create tow_airplanes
   * @description Create tow_airplane
   * :param data: Data
   * :param db: Database session
   */
  create_tow_airplanes_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TowAirplaneCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get tow_airplanes by ID
   * @description Read tow_airplane by ID
   * :param id_: TowAirplane ID
   * :param db: Database session
   * :return: TowAirplane
   */
  get_by_id_tow_airplanes__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update tow_airplanes
   * @description Update tow_airplane
   * :param id_: TowAirplane ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated tow_airplane
   */
  update_tow_airplanes__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TowAirplaneUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowAirplaneSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete tow_airplanes
   * @description Delete tow_airplane
   * :param id_: TowAirplane ID
   * :param db: Database session
   */
  delete_tow_airplanes__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search tow_types
   * @description Search tow_types
   * :param page: Page number
   * :param page_size: Page size
   * :param filters: Filters
   * :param db: Database session
   * :param settings: Settings
   * :return: List of tow_types
   */
  search_tow_types_search_post: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number | null;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TowTypeSearchSchema"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowTypeSchema"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create tow_types
   * @description Create tow_type
   * :param data: Data
   * :param db: Database session
   */
  create_tow_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TowTypeCreateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get tow_types by ID
   * @description Read tow_type by ID
   * :param id_: TowType ID
   * :param db: Database session
   * :return: TowType
   */
  get_by_id_tow_types__id___get: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update tow_types
   * @description Update tow_type
   * :param id_: TowType ID
   * :param data: Data to update
   * :param db: Database session
   * :return: Updated tow_type
   */
  update_tow_types__id___put: {
    parameters: {
      path: {
        id_: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TowTypeUpdateSchema"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TowTypeSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete tow_types
   * @description Delete tow_type
   * :param id_: TowType ID
   * :param db: Database session
   */
  delete_tow_types__id___delete: {
    parameters: {
      path: {
        id_: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
